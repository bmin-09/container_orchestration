version: '3.8'  # Specifies the version of Docker Compose

services:
  web:
    image: nginx:latest  # Use the latest Nginx image from Docker Hub
    container_name: nginx-container
    ports:
      - "80:80"  # Map port 80 on the host to port 80 on the container
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  # Mount custom Nginx configuration
    depends_on:
      - backend  # Ensure the backend service is up before starting Nginx

  backend:
    image: node:14  # Use Node.js version 14 image
    container_name: node-container
    environment:
      - NODE_ENV=production  # Set the environment variable for Node.js
    ports:
      - "3000:3000"  # Map port 3000 on the host to port 3000 on the container
    volumes:
      - ./backend:/app  # Mount the backend code directory to the container's /app
    working_dir: /app  # Set the working directory inside the container
    command: "npm start"  # Start the application using npm
    depends_on:
      - db  # Ensure the database service is up before starting the backend

  db:
    image: mongo:latest  # Use the latest MongoDB image from Docker Hub
    container_name: mongo-container
    volumes:
      - db-data:/data/db  # Mount a Docker volume to persist database data
    ports:
      - "27017:27017"  # Expose MongoDB on port 27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root  # Set the MongoDB root username
      - MONGO_INITDB_ROOT_PASSWORD=rootpassword  # Set the MongoDB root password

volumes:
  db-data:  # Create a named volume to persist MongoDB data
    driver: local
